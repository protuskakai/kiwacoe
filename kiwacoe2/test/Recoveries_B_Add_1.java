/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiwacoe;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import static kiwacoe.Login.user;

/**
 *
 * @author user
 */
public class Recoveries_B_Add extends javax.swing.JDialog {

    ResultSet rs = null;
      ResultSet rsc = null;
    public String mx, sql;

    PreparedStatement pst = null;
    PreparedStatement pstc = null;
    PreparedStatement pst3 = null;
    public String xuserid, xyr, xmon, xtyp,xbacc,xbnch,xsamt,xwamt;
    //rs.first();
    String accno = "";
    String nam = "";
    double intr = 0;
    double intramt = 0;
    double bal = 0;
    int dur = 0;
    String typ = "";
    String membid = "";
    double pamt = 0;
    double ramt = 0;
    double fee = 0;
    String loanid = "";
    String intrtyp = "";
    String loantyp = "";
    Connection connx = DBconnect.ConnecrDb();

    /**
     * Creates new form Users_add
     */
    public Recoveries_B_Add(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        mon = new javax.swing.JComboBox<>();
        yr = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Month");

        jLabel2.setText("Year");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        mon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        yr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mon, 0, 106, Short.MAX_VALUE)
                            .addComponent(yr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int ind = 0;
        getdata();
        try {
            if (Validate_period.validate(xyr, xmon) > 0)//check if period is open
            {

                //  MessageBox.infoBox("Period Closed Successfully", "Close Period");
            } else {  //if period is not open
                MessageBox.infoBox("Period Not Open!!", "Close Period");
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Shares_B_Add.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ind = ifexists();
        } catch (SQLException ex) {
            Logger.getLogger(Payments_B_add.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ind > 0) {
            MessageBox.infoBox("Batch Already Exists", "Create Batch");
            return;
        }
        
        // create recoveries=======================================================
         try {
            readmaster();
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_B_Add.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox(ex.toString(), "New Recoveries Batch");
            return;
        }
         update_batch();
         
         //===========================================================================
        
        
        
        
        Connection conn = DBconnect.ConnecrDb();
        sql = "insert into  repbatches (yr,mon,recs,stat,bdate,tot) "
                
                + "values('" + xyr + "','" + xmon + "',0,'Open',CURDATE(),0)";

        System.out.println(sql);
        try {

            pst = conn.prepareStatement(sql);
            pst.executeUpdate(sql);
            //    rs= pst.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(Users_add.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox(ex.toString(), "New Expenses Batch");
            return;
            //     msbbox.show(Alert.AlertType.ERROR, ex.toString(),"SQL Error" ,"ffff");
        }

        //  msbbox.show(Alert.AlertType.ERROR, "New record saved successfully","New Record" ,"ffff");       
        // Members_listController zn = new Members_listController();
       
        MessageBox.infoBox("Batch Created Successfully", "New Recoveries Batch");
    }//GEN-LAST:event_jButton1ActionPerformed
   public void update_batch()
   {
       
   }
   public void readmaster() throws SQLException
   {
       
        String sql = "select * from saccodb ";
       // connx = DBconnect.ConnecrDb();
       //   pst = connx.prepareStatement(sql);

        rsc = pstc.executeQuery();
        String sql2 = "";
        // connx = DBconnect.ConnecrDb();
        pstc = connx.prepareStatement(sql);

        rsc = pstc.executeQuery();
    
       while (rsc.next()) {
           membid = rsc.getString("membid");
           xbnch = rsc.getString("bnch");  //branch
           xbacc = rsc.getString("payid");
            xsamt = rsc.getString("samt");
            xwamt = rsc.getString("samt");
           do_recoveries(membid);
       }
   }
    public void do_recoveries( String zmembid) throws SQLException {
   
       // -------read master table first
        
       accno="";
       double qamt=0;
        
        String sql = "select a.*,b.amt as bal,c.intrtyp from loans a,balx b,loantypes c where c.nam=a.typ and a.accno=b.accno and a.membid='"+zmembid+"' and b.amt>0 and a.intr>0 ";
       // connx = DBconnect.ConnecrDb();
        pst = connx.prepareStatement(sql);

        rs = pst.executeQuery();
        String sql2 = "";
        // connx = DBconnect.ConnecrDb();
        pst = connx.prepareStatement(sql);

        rs = pst.executeQuery();
    
        while (rs.next()) {
            accno = rs.getString("accno");
             
           //  System.out.print(accno); 
            fee = Double.parseDouble(rs.getString("fee"));
            
              System.out.print(fee); 
            nam = rs.getString("nam");
            typ = rs.getString("typ");
             intrtyp = rs.getString("intrtyp");
            intr = Double.parseDouble(rs.getString("intr"));
           //  MessageBox.infoBox("sddgdgd", user);
            // intr = rs.getDouble("intr");  //principal amt
            bal = Double.parseDouble(rs.getString("bal"));
            dur = Integer.parseInt(rs.getString("dur"));
            membid = rs.getString("membid");
            loanid = rs.getString("loanid");
            pamt = Double.parseDouble(rs.getString("amt"));  //principal amt
            
          //   MessageBox.infoBox(Double.toString(fee), "fee");
          //    MessageBox.infoBox(Double.toString(intr), "intr");
          //     MessageBox.infoBox(Double.toString(dur), "dur");
            loantyp = rs.getString("typ");
            ramt = (pamt+fee) / dur;
            //ramt=get_ramt(accno,typ);
            if (intrtyp.equals("F")) {
                intramt = ((pamt+fee) * (intr/100)) / dur;
            }
            if (intrtyp.equals("R")) {
                intramt = bal * (intr/100);
            }
                 qamt=ramt + intramt;
            
             

        }
        
        
      if (accno.equals(""))
      {  
          sql2 = " insert into repayments( membid,accno,loanid,amt,ramt,typ,nam,yr,mon,bal,intr,intramt,cdate,rdate,stat,ctime,comm,bnch,bacc,wamt,samt) values( "
                    + "'" + membid + "'"
                    + "," + accno + ""
                    + ",'" +  "'"                
                    + ",0"
                    + ",0"
                    + ",''" 
                    + ",'" + nam + "'"
                    + ",'" + xyr + "'"
                    + ",'" + xmon + "'"
                    + ",0"
                    + ",0"
                    + ",0"
                    + ",CURDATE()" //cdate
                    + ",CURDATE()" //rdate
                    + ",'U'"
                    + ",CURTIME()" //ctime
                    + ",'" + "Recovery for " + xyr +"-"+ xmon 
                    + ",'" + xbacc + "'"
                    + "," +  xwamt + ""
                    + "," +  xsamt +  ")" ;  
       //-----------------------------------------------------------------------------------   
        
      }else   // those without loans
      {
        sql2 = " insert into repayments( membid,accno,loanid,amt,ramt,typ,nam,yr,mon,bal,intr,intramt,cdate,rdate,stat,ctime,comm,bnch,bacc,wamt,samt) values( "
                    + "'" + membid + "'"
                    + "," + accno + ""
                    + ",'" + loanid+ "'"                
                    + ","+ qamt+ ""
                    + "," + ramt + ""
                    + ",'" + loantyp + "'" 
                    + ",'" + nam + "'"
                    + ",'" + xyr + "'"
                    + ",'" + xmon + "'"
                    + "," + bal + ""
                    + "," + intr + ""
                    + "," + intramt + ""
                    + ",CURDATE()" //cdate
                    + ",CURDATE()" //rdate
                    + ",'U'"
                    + ",CURTIME()" //ctime
                    + ",'" + "Loan Recovery for " + xyr +"-"+ xmon 
                    + ",'" + xbnch + "'"  //branch
                    + ",'" + xbacc + "'" //bank acc
                    + "," + xwamt + ""  //
                    + "," + xsamt  + ")" ;  //shares monthly recovery   
      }
             System.out.print(sql2); 
          //    MessageBox.infoBox(sql2, "membid");
               execute(sql2);

    }
    public void execute(String sql4)
    {
        try {
             
              
              pst3=connx.prepareStatement(sql4);
              pst3.executeUpdate(sql4);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Users_add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), "New  Batch");
              return;
         //     msbbox.show(Alert.AlertType.ERROR, ex.toString(),"SQL Error" ,"ffff");
          }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          Recoveries_B_Add.this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Users_add dialog = new Users_add(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public void getdata()
{
    
    xyr=yr.getSelectedItem().toString();
    xmon = String.format("%02d", mon.getSelectedIndex() + 1);
   // xtyp=typ.getSelectedItem().toString();

   
}

 public int ifexists() throws SQLException 
 {
     int x = 0;
     String sql = "SELECT yr,mon,COUNT(*) as count FROM repbatches  where yr='" + xyr + "' and mon='" + xmon + "'  group by yr,mon";
     System.out.print(sql);
     Connection connx = DBconnect.ConnecrDb();
     pst = connx.prepareStatement(sql);

     rs = pst.executeQuery();
     //rs.first();
     while (rs.next()) {
        // user = rs.getString("userid");
       //  pwd = rs.getString("pass");
      //   typ = rs.getString("typ");
         x = Integer.valueOf(rs.getString("count"));
     }

     return x;
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> mon;
    private javax.swing.JComboBox<String> yr;
    // End of variables declaration//GEN-END:variables
}

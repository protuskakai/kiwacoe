/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiwacoe;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import static kiwacoe.LoansNew_List.zyr;

//import static majiApp.Readings_BList.zyr;


/**
 *
 * @author user
 */
public class Recoveries_List extends javax.swing.JFrame {
    DefaultTableModel testlist = new DefaultTableModel();
    ResultSet rs = null;
    Connection conn = DBconnect.ConnecrDb();
    ResultSet rs2 = null;
    public String mx, sql;
    ResultSet rs22 = null;
    PreparedStatement pst = null;
    PreparedStatement pst2 = null;
    PreparedStatement pst22 = null;
    PreparedStatement pst32 = null;
    public String xuserid, xnam, xpass, xtyp;
    static String zyr, zmon, ztyp, zstat;
    public Connection connz = null;
    HashMap hm = null;
     Connection connx = DBconnect.ConnecrDb();
    //  static String muserid,mnam,mtyp; 
    //   public static  ListSelectionModel cellSelectionModel ;
    /**
     * Creates new form UsersLIst
     *
     *
     */
    static JTable table;
public Recoveries_List() {
    //  table=jTable1;
        initComponents();
        jTable1=SetTable.data(jTable1);
        jButton1.setVisible(false);
              ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                String muserid = null;
                String mtyp = null;
                String mnam = null;
                int[] selectedRow = jTable1.getSelectedRows();
                int[] selectedColumns = jTable1.getSelectedColumns();
                int row = jTable1.getSelectedRow();
                int col = 1; // ID is the first Column
                if (row>-1)
                {    
                    zyr = jTable1.getValueAt(row, 0).toString();
                    zmon = jTable1.getValueAt(row, 1).toString();
                    //     ztyp = jTable1.getValueAt(row, 2).toString();
                    zstat = jTable1.getValueAt(row, 4).toString();
                }
                System.out.println("Selected: " + mtyp);
            }

        });
         String qym[]=  GetMonth.set_yr_mon();
      mon.setSelectedItem(qym[0]);
      yr.setSelectedItem(qym[1]);
      doread();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        yr = new javax.swing.JComboBox<>();
        mon = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("View Loan Deductions");
        jButton2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton2FocusGained(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Print List");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("Generate New List");
        jButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton1FocusGained(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        yr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));
        yr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yrActionPerformed(evt);
            }
        });

        mon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        mon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monActionPerformed(evt);
            }
        });

        jLabel1.setText("Year");

        jLabel2.setText("Month");

        jButton5.setText("Post");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jButton6.setText("View Bank Deductions");
        jButton6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton6FocusGained(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Undo Deductions");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenu1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMenu1FocusGained(evt);
            }
        });

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 838, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton7)
                    .addComponent(jButton2))
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if(row<0)
        {
           MessageBox.infoBox("No Batch Selected", "Open Batch");
           return;
        }
         Recovceries_capture.typ="Auto";
        Recovceries_capture dd = new Recovceries_capture();
        // dd.setModal(true);
        //  dialog.setSize(400, 400);
         dd.setDefaultCloseOperation(dd.DO_NOTHING_ON_CLOSE);
        dd.setLocationRelativeTo(null);
        // dd.setExtendedState(dd.MAXIMIZED_BOTH);
        dd.setResizable(false);
        dd.setTitle("Loan Deductions  For: " + zyr + "-" + zmon);
        dd.setVisible(true);
        // dd.setM
       // this.setVisible(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // UsersLisr.e
        Recoveries_List.this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if(row<0)
        {
           MessageBox.infoBox("No Batch Selected", "Open Batch");
           return;
        }
           this.setCursor(cursor_typ.busy());
          hm = new HashMap();
        hm.put("yr", zyr);
        hm.put("mon", zmon);
        hm.put("title", "Loan Repayments For : " +GetMonth.format(zmon)+ "  , "+zyr);
           String filename="reportrepayments.jrxml";
      String title = "Loan Repayments For : " +GetMonth.format(zmon)+ "  , "+zyr;
      RunReports.preview(filename, hm, title);
    // Insert a row at position p
   // int p = 1;
   // model.insertRow(p, new Object[] { "r3" });
      this.setCursor(cursor_typ.notbusy());
        
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      //  MessageBox.infoBox("sdffdfsd", "dfdfgg");
        Recoveries_B_Add dd = new Recoveries_B_Add(this, true);
        // dd.setModal(true);
        //  dialog.setSize(400, 400);
        dd.setLocationRelativeTo(null);
        // dd.setExtendedState(dd.MAXIMIZED_BOTH);
        dd.setResizable(false);
        dd.setTitle("Generate New List");
        dd.setVisible(true);


    }//GEN-LAST:event_jButton1ActionPerformed

    private void yrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yrActionPerformed
        // TODO add your handling code here:
        doread();
    }//GEN-LAST:event_yrActionPerformed

    private void monActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monActionPerformed
        // TODO add your handling code here:
          doread();
    }//GEN-LAST:event_monActionPerformed

    private void jButton1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton1FocusGained
        // TODO add your handling code here:
          doread();
    }//GEN-LAST:event_jButton1FocusGained

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        String ans=Confirm.YesNo("Are You Sure?", "Post Batch");
          if (ans.equals("N"))
          {
              return;
          }
        int row = jTable1.getSelectedRow();
        if (row < 0) {
            MessageBox.infoBox("No Batch Selected", "Post Batch");
            return;
        }
        
        if(zstat.equals("Posted"))
        {
            MessageBox.infoBox("Batch Already Posted", "Post Batch");
            return;
        }
         try {
            // TODO add your handling code here:
            if (Validate_period.validate(zyr, zmon) < 1) {
                MessageBox.infoBox("Cant Post,Period not open!!", "Post Batch");
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Loan_Repay_List.class.getName()).log(Level.SEVERE, null, ex);
        }
          int t = 0;
        try {
         t =Validate_batch.validate(zyr, zmon, "repbatches");
        } catch (SQLException ex) {
            Logger.getLogger(Loan_Repay_List.class.getName()).log(Level.SEVERE, null, ex);
       }
          this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            try {
                 postbatch(zyr,zmon);
             } catch (SQLException ex) {
                 Logger.getLogger(Loan_Repay_List.class.getName()).log(Level.SEVERE, null, ex);
             }
            this.setCursor(Cursor.getDefaultCursor());
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton2FocusGained
        try {
            // TODO add your handling code here:
            update_batch();
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_List.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2FocusGained

    private void jButton6FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton6FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6FocusGained

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if (row < 0) {
            MessageBox.infoBox("No Batch Selected", "Open Batch");
            return;
        }

        Recovceries_bank dd = new Recovceries_bank();
        // dd.setModal(true);
        //  dialog.setSize(400, 400);
        dd.setLocationRelativeTo(null);
         dd.setDefaultCloseOperation(dd.DO_NOTHING_ON_CLOSE);
        // dd.setExtendedState(dd.MAXIMIZED_BOTH);
        dd.setResizable(false);
        dd.setTitle("Bank Deductions  For: " + zyr + "-" + zmon);
        dd.setVisible(true);
        // dd.setM
        this.setVisible(false);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Recoveries_List.this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMenu1FocusGained
        // TODO add your handling code here:
        doread();
    }//GEN-LAST:event_jMenu1FocusGained

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
            if(zstat.equals("Posted"))
        {
            MessageBox.infoBox("Batch Already Posted", "Clear List");
            return;
        }
        
        int row = jTable1.getSelectedRow();
        if (row < 0) {
            MessageBox.infoBox("No Batch Selected", "Clear List");
            return;
        }
         String ans=Confirm.YesNo("Are You Sure?", "Clear List");
          if (ans.equals("N"))
          {
              return;
          }
       
           
        String utyp[] = Current_user.usr();
        if (utyp[2].equals("Admin") ) {
            
        }else
        {
           MessageBox.infoBox("You have no permission, Access Denied!!", "Post Batch");
            return;  
        }

        
        String sql = " delete from shares where CONCAT(yr,mon)='" + zyr + zmon + "' and comm='Auto Deducted'";
        System.out.print(sql);
        execute(sql);
        
        sql = " delete from shbatches where CONCAT(yr,mon)='" + zyr + zmon + "'";
        System.out.print(sql);
   //     execute(sql);

        sql = " delete from recovered where CONCAT(yr,mon)='" + zyr + zmon + "'";
        System.out.print(sql);
        execute(sql);
        
        sql = " delete from repbatches where CONCAT(yr,mon)='" + zyr + zmon + "'";
        System.out.print(sql);
   //     execute(sql);
        
         sql = " delete from bnkbatches where CONCAT(yr,mon)='" + zyr + zmon + "'";
        System.out.print(sql);
        execute(sql);

        sql = " delete from repayments where CONCAT(yr,mon)='" + zyr + zmon + "'";
        System.out.print(sql);
        execute(sql);
        
        doread();
        MessageBox.infoBox("Undo Successful!!", "Undo Deductions");
        
    }//GEN-LAST:event_jButton7ActionPerformed
  
     public void execute(String sql4)
    {
        try {
             
              
              pst=connx.prepareStatement(sql4);
              pst.executeUpdate(sql4);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Users_add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), "New  Batch");
              return;
         //     msbbox.show(Alert.AlertType.ERROR, ex.toString(),"SQL Error" ,"ffff");
          }
    }
    public void update_batch2(String gyr, String gmon) throws SQLException
  {
      
      Connection conn = DBconnect.ConnecrDb();

      String sql = "SELECT count(*) as cnt from repayments where CONCAT(yr,mon)='" + gyr + gmon + "'";
      System.out.print(sql);
      int bb = 0;
      pst = conn.prepareStatement(sql);

      rs = pst.executeQuery();
      while (rs.next()) {
          bb = rs.getInt("cnt");
      }
      
      String sql2 = " update repbatches set recs=" + Double.toString(bb) + " where CONCAT(yr,mon)='" + gyr + gmon + "'";
      System.out.print(sql2);
      pst = conn.prepareStatement(sql2);
      pst.executeUpdate(sql2);
  }
    public void update_batch() throws SQLException
  {
      
       String syr = yr.getSelectedItem().toString();
      String smon = String.format("%02d", mon.getSelectedIndex() + 1);
     
      String sql = "SELECT count(*) as cnt from recovered where CONCAT(yr,mon)='" + syr + smon + "'";

      int bb = 0;
      pst = conn.prepareStatement(sql);
      System.out.print(sql);
      rs = pst.executeQuery();
      while (rs.next()) {
          bb = rs.getInt("cnt");
      }
      String sql2 = " update bnkbatches set recs=" + Double.toString(bb)+" where CONCAT(yr,mon)='" + syr + smon  + "'";
      pst = conn.prepareStatement(sql2);
      pst.executeUpdate(sql2);
      
       
  } 
     public void update_batch_stat(String ssql3)
   {
       try {

           pst32 = connz.prepareStatement(ssql3);
           pst32.executeUpdate(ssql3);
           //    rs= pst.executeQuery();
       } catch (SQLException ex) {
           Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
           MessageBox.infoBox(ex.toString(), "Update Batch Status Method");
           return;
       }
   }
   public void update_rec_stat(String ssql3)
   {
       try {

           pst32 = connz.prepareStatement(ssql3);
           pst32.executeUpdate(ssql3);
           //    rs= pst.executeQuery();
       } catch (SQLException ex) {
           Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
           MessageBox.infoBox(ex.toString(), "Update Status Method");
           return;
       }
   }
    public void insert_rec(String wsql)
    {
        try {

            pst32 = connz.prepareStatement(wsql);
            pst32.executeUpdate(wsql);
            //    rs= pst.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox(ex.toString(), "insert_rec Method");
            return;
        }
    }
    
    public void doread()
{
        try {
            update_batch();
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_List.class.getName()).log(Level.SEVERE, null, ex);
        }
     String syr = yr.getSelectedItem().toString();
    String smon = String.format("%02d", mon.getSelectedIndex() + 1);
    try {
            update_batch2(syr,smon);
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_List.class.getName()).log(Level.SEVERE, null, ex);
        }
   // String = mon.getSelectedItem().toString();
   
    //  String sval=val.getText().toString();

    sql = " select * from bnkbatches where yr='" + syr + "' and mon='" + smon + "'";
    //    System.
    //   MessageBox.infoBox(sql, "dffd");
   
     System.out.println(sql);
    DefaultTableModel model = new DefaultTableModel();
    // jTable1 hh;
    jTable1.setModel(model);
    model.addColumn("Year");
    model.addColumn("Month");
   // model.addColumn("Region");
 //   model.addColumn("Loan Type");
    model.addColumn("No of Recs");
   
    model.addColumn("Total Amount");
     model.addColumn("Status");
    // model.
    // Create the first row
    Connection conn = DBconnect.ConnecrDb();

    //  String sql = "SELECT * from users ";

    try {
        pst = conn.prepareStatement(sql);

        rs = pst.executeQuery();
        // rs.first();
        int p = 0;
        String byr = "";
        String bmon = "";
      //  String btyp = "";
      //  String bdate = "";
        String bstat = "";
        String brecs = "";
        String btot = "";
         
        while (rs.next()) {
            //  readdata();
            byr = rs.getString("yr");
            bmon = rs.getString("mon");
         //   breg = rs.getString("reg");
        //    btyp = rs.getString("typ");
            
           btot = rs.getString("tot");
            brecs = rs.getString("recs");
            bstat = rs.getString("stat");
            model.insertRow(p, new Object[]{byr, bmon,  brecs, btot, bstat});
             jTable1.changeSelection(0, 0, false, false);
        }

    } catch (SQLException ex) {
        Logger.getLogger(UsersLIst.class.getName()).log(Level.SEVERE, null, ex);
    }
   

}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsersLIst().setVisible(true);
               
            }
        });
    }
   public void postbatch(String zyr,String zmon) throws SQLException
{
    
        
        //String sx = membid.getText().toString();
        sql = "SELECT * from recovered where yr='" + zyr +"' and mon='"+zmon+"'";

        Connection connx = DBconnect.ConnecrDb();

        pst2 = connx.prepareStatement(sql);
        System.out.println(sql);

        rs2 = pst2.executeQuery();
      //  rs2.first();
      //  readdata();
        // double cnt=0;
        while (rs2.next()) {
           
             readbatch(zyr,zmon,rs2);

        }
        Close_batch.close(zyr,zmon,"bnkbatches");
     //   searchz();
        MessageBox.infoBox("Posting Done!!", "Post Batch");
    }

 public void readbatch(String hyr,String hmon,ResultSet rrs) throws SQLException {
        //accno 	loanid 	typ 	yr 	mon 	bf 	intr 	cf 	nam 
      
      
       
   //  String amt = rs.getString("amt");
     String ins = rrs.getString("ins");
      String bnk = rrs.getString("bch");
       String wel = rrs.getString("wel");
        String fee = rrs.getString("fee");
     String membid = rrs.getString("membid");
     String nam = rrs.getString("nam");
    // String dat = rrs.getString("cdate");
     String pseq = rrs.getString("seq");
     String soc = "Bank Deductions";
     String suffix = membid;
     String descr = "Bank Deductions";
     String dr = "0";
     String cr = "0";
     
     //Post insuarance....................................
      dr = ins;
      cr = "0";
     String accno = "1101";
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon,  pseq);//post dr
     accno = "2101";
     cr = ins;
     dr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,pseq);//post cr
     
     
     //end of insuarance................................
     
      //Post bank charges....................................
      dr = bnk;
      cr = "0";
      accno = "1101";
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon,  pseq);//post dr
     accno = "3106";
     cr = bnk;
     dr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,pseq);//post cr
     
     
     //end of bank charges................................
     
       //Post welfare....................................
      dr = wel;
      cr = "0";
      accno = "1101";
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon,  pseq);//post dr
     accno = "2102";
     cr = wel;
     dr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,pseq);//post cr
     
     
     //end of welfare................................
     
     
     
       //Post application fee....................................
      dr = fee;
      cr = "0";
      accno = "1101";
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon,  pseq);//post dr
     accno = "3107";
     cr = fee;
     dr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,pseq);//post cr
     
     
     //end of application fee................................
            
    }
    
    public void insert_rec(String accno,String soc,String descr,String suffix,String dr,String cr,String hyr,String hmon,String pseq)
    {
       
        sql = "insert into gl (accno,soc,descr,suffix,dr,cr,yr,mon,dat,pseq,docno,pdate,ptime) values("  
                + accno+
                 ",'"+soc+"'"
                + ",'"+descr+"'"
                + ",'"+suffix+"'"
                + ","+dr+""
                + ","+cr+""                
                 + ",'"+hyr+"'"
                 + ",'"+hmon+"'" 
                  + ",CURDATE()"
                + ","+pseq+""
                  + ",'"+pseq+"'"
                 + ",CURDATE(),CURTIME())";
   //     msbbox.show(Alert.AlertType.ERROR, sql, "Save Method", "Database Error");
        
        System.out.println(sql);
        try {

            pst22 = conn.prepareStatement(sql);
            pst22.executeUpdate(sql);
            //    rs= pst.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(Loan_Repay_List.class.getName()).log(Level.SEVERE, null, ex);
           MessageBox.infoBox( ex.toString(), "Database Error");
          //  return;
        }

       // msbbox.show(Alert.AlertType.ERROR, "New record saved successfully", "New Record", "ffff");
      
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> mon;
    private javax.swing.JComboBox<String> yr;
    // End of variables declaration//GEN-END:variables
}

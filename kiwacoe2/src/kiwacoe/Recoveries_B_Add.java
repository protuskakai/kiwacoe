/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiwacoe;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javax.swing.SwingWorker;
import static kiwacoe.Login.user;

/**
 *
 * @author user
 */
public class Recoveries_B_Add extends javax.swing.JDialog   {
  //  ProgressBarUpdator ju=null;
    int yy=0;
    ResultSet rs = null;
     ResultSet rs6 = null;
    ResultSet rsc = null;
    public String mx, sql;
    PreparedStatement pst = null;
    PreparedStatement pst6 = null;
    PreparedStatement pstc = null;
    PreparedStatement pst3 = null;
    double totsh=0,totcnt=0;
    public String xuserid, xyr, xmon, xtyp,xbacc,xbnch,xsamt,xwamt;
    //rs.first();
    String accno = "";
    String nam = "";
    double intr = 0;
    double intramt = 0;
    double bal = 0;
    int dur = 0;
    String typ = "";
    String membid = "";
    double pamt = 0;
    double ramt = 0;
    double fee = 0;
    String loanid = "";
    String intrtyp = "";
    String loantyp = "";
    Connection connx = DBconnect.ConnecrDb();

    /**
     * Creates new form Users_add
     */
    public Recoveries_B_Add(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         String qym[]=  GetMonth.set_yr_mon();
      mon.setSelectedItem(qym[0]);
      yr.setSelectedItem(qym[1]);
        // ju = new ProgressBarUpdator(jProgressBar1);
       
      //  new java.lang.Thread(ju).start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        mon = new javax.swing.JComboBox<>();
        yr = new javax.swing.JComboBox<>();
        jProgressBar1 = new javax.swing.JProgressBar();
        sss = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Month");

        jLabel2.setText("Year");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        mon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        yr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mon, 0, 106, Short.MAX_VALUE)
                                    .addComponent(yr, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(sss, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(sss, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        
        
        String ans=Confirm.YesNo("<html> <b> <font size=10>Please ensure the following before proceeding:\n\n "
                + "\t1. You have captured all the new loans for this month\n\n"
                + "\t2. You have captured all the new members \n\n"
                 + "\t3. You have captured all the adjustments for the month\n"
                + "\n\n Proceed with auto generate?", "Generate Deductions");
          if (ans.equals("N"))
          {
              return;
          }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        ss();
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_jButton1ActionPerformed
public void ss() {
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {

            @Override

            protected Boolean doInBackground() throws Exception {

                // Simulate doing something useful.
               // for (int i = 0; i <= 100; i++) {

               //     Thread.sleep(1000);
                //     sss.setText("Running " + i);
                      setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                       sss.setText("Creating Batch..Please WAIT !!!");
                        start();

               // }

                // Here we can return some object of whatever type
                // we specified for the first template parameter.
                // (in this case we're auto-boxing 'true').
                return true;

            }

            // Can safely update the GUI from this method.
            protected void done() {

                boolean status;

                try {

                    // Retrieve the return value of doInBackground.
                    status = get();

                    sss.setText("Done !!");
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                 //    MessageBox.infoBox("Done!!", "");

                } catch (InterruptedException e) {

                    // This is thrown if the thread's interrupted.
                } catch (ExecutionException e) {

                    // This is thrown if we throw an exception
                    // from doInBackground.
                }

            }

        };

        worker.execute();
    }
    public void start()
{
        int ind = 0;
        getdata();
       
jProgressBar1.setValue(0);
        try {
            if (Validate_period.validate(xyr, xmon) > 0)//check if period is open
            {

                //  MessageBox.infoBox("Period Closed Successfully", "Close Period");
            } else {  //if period is not open
                MessageBox.infoBox("Period Not Open!!", "Close Period");
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Shares_B_Add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), "New Recoveries Batch");
        }
        try {
            ind = ifexists();
        } catch (SQLException ex) {
            Logger.getLogger(Payments_B_add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), "New Recoveries Batch");
        }
        try {
            ind = ifexists2();
        } catch (SQLException ex) {
            Logger.getLogger(Payments_B_add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), "Bank Batch");
        }
        if (ind > 0) {
            MessageBox.infoBox("Batch Already Exists", "Create Batch");
            return;
        }
       //MessageBox.infoBox("Period Not Open!!", "Close Period");
       
        // create recoveries=======================================================
         try {
           do_recoveries_loans();
           yy=yy+20;
           jProgressBar1.setValue(yy);
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_B_Add.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox(ex.toString(), "New Recoveries Batch");
            return;
        }
        try {
            do_recoveries_bank();
              yy=yy+20;
           jProgressBar1.setValue(yy);
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_B_Add.class.getName()).log(Level.SEVERE, null, ex);
             MessageBox.infoBox(ex.toString(), "New Recoveries Batch");
            return;
        }
         update_batch();    
           yy=yy+20;
           jProgressBar1.setValue(yy);
         //===========================================================================         
        Connection conn = DBconnect.ConnecrDb();
        sql = "insert into  repbatches (yr,mon,recs,stat,bdate,tot) "
          + "values('" + xyr + "','" + xmon + "',0,'Open',CURDATE(),0)";
      //  sql = "insert into  bnkbatches (yr,mon,recs,stat,bdate,tot) "
      //    + "values('" + xyr + "','" + xmon + "',0,'Open',CURDATE(),0)";
        System.out.println(sql);
        try {
          //  pst = conn.prepareStatement(sql);
          //  pst.executeUpdate(sql);
            
            sql = "insert into  bnkbatches (yr,mon,recs,stat,bdate,tot) "
          + "values('" + xyr + "','" + xmon + "',0,'Open',CURDATE(),0)";
             pst = conn.prepareStatement(sql);
            pst.executeUpdate(sql);
            //    rs= pst.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(Users_add.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox(ex.toString(), "New Expenses Batch");
            return;
            //     msbbox.show(Alert.AlertType.ERROR, ex.toString(),"SQL Error" ,"ffff");
        }
        
        try {
            get_shares();
              yy=yy+20;
           jProgressBar1.setValue(yy);
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_B_Add.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //  msbbox.show(Alert.AlertType.ERROR, "New record saved successfully","New Record" ,"ffff");       
        // Members_listController zn = new Members_listController();
       
        MessageBox.infoBox("Batch Created Successfully", "New Recoveries Batch");
}
    public void update_batch()
   {
       
   }
   public void get_shares() throws SQLException
   {
       String sql = "select * from saccodb where samt>1 and auto=1 ";
       pstc = connx.prepareStatement(sql);
       rsc = pstc.executeQuery();
       String samt = "";
       String comm = "";
       String vsql = "";
       while (rsc.next()) {
           membid = rsc.getString("membid");
           nam = rsc.getString("nam");
           samt = rsc.getString("samt");
           totcnt=totcnt+1;
           totsh=totsh+Double.parseDouble(samt);
           vsql="insert into shares (membid,nam,amt,comm,typ,yr,mon,cdate,rdate,ctime,stat) values ("
                    +"'"+membid+"'"
                    +",'"+nam+"'"
                    +","+samt+""
                    +",'"+"Auto Deducted"+"'"
                    +",'"+"Deposit"+"'"
                    +",'"+xyr+"'"
                    +",'"+xmon+"', CURDATE(),CURDATE(),CURTIME(),'A')";
                   execute(vsql);
       }
       String stotsh = Double.toString(totsh);
       String stotcnt = Double.toString(totcnt);
       String wsql = "insert into shbatches ( yr,mon,recs,stat,bdate,tot,typ) values("
               + "'" + xyr + "','" + xmon + "'," + stotcnt + ",'Open',CURDATE()," + stotsh + ",'Deposit')";
 //      execute(wsql);
       yy = yy + 20;
       jProgressBar1.setValue(yy);
   }
   public void do_recoveries_bank() throws SQLException
   {      
      
       String sql = "select * from saccodb where  stat=1 and auto=1 ";
       // connx = DBconnect.ConnecrDb();
       //   pst = connx.prepareStatement(sql);
     //  rsc = pstc.executeQuery();
       String sql2 = "";
       // connx = DBconnect.ConnecrDb();
       pstc = connx.prepareStatement(sql);
       rsc = pstc.executeQuery();
       String lamt = "0";
       String iamt = "0";
       String rsql = "";
       String wel = "";
       String nam = "";
       String bchrg = "120";
       String wamt = "";
        String mfee="0";
       double tot = 0;
       while (rsc.next()) {
           lamt="0";
           membid = rsc.getString("membid");
           xbnch = rsc.getString("bnch");  //branch
           nam = rsc.getString("nam");
          
           xbacc = rsc.getString("payid");
         // MessageBox.infoBox(nam+" "+xbacc, user);
           xsamt = rsc.getString("samt");
      
         //  xwamt = rsc.getString("samt");
           lamt= get_loan_amt(membid);
       //    MessageBox.infoBox(lamt, "membid");
           wel=rsc.getString("wel");
          
           if (wel.equals("1"))
           {
               wamt="600";              
           }else
           {
               wamt="0";
           }
           if(Double.parseDouble( lamt)>0)
           {
               iamt="200";
           }else
           {
               iamt="0";
           }      
             mfee=get_fee(xyr,xmon,membid);//
           tot = Double.parseDouble(lamt) +//
                   Double.parseDouble(wamt) + //
                   Double.parseDouble(iamt) + //
                   Double.parseDouble(bchrg) + //
                   Double.parseDouble(mfee) +  // 
                   Double.parseDouble(xsamt); //
           //membid 	nam 	yr 	mon 	ins 	wel 	ln 	bch 	tot 
           //insert record to recoveries table 
           rsql = " insert into recovered (membid,nam,yr,mon,ins,wel,ln,bch,tot,sh,bnch,bacc,dat,tim,fee) values ("
                   + "'" + membid + "'"
                   + ",'" + nam + "'"
                   + ",'" + xyr + "'"
                   + ",'" + xmon + "'"
                   + "," + iamt
                   + "," + wamt
                   + "," + lamt
                   + "," + bchrg
                   + "," + tot
                   //   + "," + xsamt
                   + "," + xsamt
                   + ",'" + xbnch + "'"
                   + ",'" + xbacc + "',CURDATE(),CURTIME()"
                    + "," + mfee + ")";
             //     + "";
             //     fee//
           execute(rsql);
       }
   }
   public String get_fee(String pyr,String pmon,String pmembid) throws SQLException
   {
       String mfee="0";
       
       String sql = "select count(*) as cnt,sum(fee) as mfee from loans where CONCAT(yr,mon,membid)='" + pyr + pmon + pmembid + "'";
       // pst = connx.prepareStatement(sql);
        System.out.print(sql);
   
        pst = connx.prepareStatement(sql);

        rs = pst.executeQuery();

        while (rs.next()) {
           
           
               
                 mfee = rs.getString("mfee");
               
        }

      //  return llamt;
      if(mfee==null)
      {
          mfee="0";
      }
    
       
       
       return mfee;
   }
    public String get_loan_amt(String lmembid) throws SQLException {
        String llamt = "0";
        String sql = "select sum(amt+0) as lamt,count(*) as cnt from repayments where CONCAT(yr,mon,membid)='" + xyr + xmon + lmembid + "'";
       // pst = connx.prepareStatement(sql);
        System.out.print(sql);
       // rs = pst.executeQuery();
        String sql2 = "";
        // connx = DBconnect.ConnecrDb();
        pst = connx.prepareStatement(sql);

        rs = pst.executeQuery();

        while (rs.next()) {
           
            if(rs.getString("cnt").equals("0"))
            {
                llamt="0";
            }else
                {
                 llamt = rs.getString("lamt");
                }
        }

        return llamt;
    }
    public void do_recoveries_loans() throws SQLException {
        // -------read master table first
        accno = "";
        double qamt = 0;

        String sql = "select a.*,b.amt as bal,c.intrtyp from loans a,balx b,loantypes c where  c.nam=a.typ and a.accno=b.accno  and b.amt>0 and a.intr>0  ";
        // connx = DBconnect.ConnecrDb();
        // pst = connx.prepareStatement(sql);
        System.out.print(sql);

        //  rs = pst.executeQuery();
        String sql2 = "";
        // connx = DBconnect.ConnecrDb();
        pst = connx.prepareStatement(sql);

        rs = pst.executeQuery();

        while (rs.next()) {
            int auto = getauto(rs.getString("membid"));
       //     MessageBox.infoBox(Integer.toString(auto), user);
            if (auto == 1) //if auto deduct 
            {

                accno = rs.getString("accno");
                //  System.out.print(accno); 
                fee = Double.parseDouble(rs.getString("fee"));
                System.out.print(fee);
                nam = rs.getString("nam");
                typ = rs.getString("typ");
                intrtyp = rs.getString("intrtyp");
                intr = Double.parseDouble(rs.getString("intr"));
                bal = Double.parseDouble(rs.getString("bal"));
                dur = Integer.parseInt(rs.getString("dur"));
                membid = rs.getString("membid");
                loanid = rs.getString("loanid");
                pamt = Double.parseDouble(rs.getString("amt"));  //principal amt
                loantyp = rs.getString("typ");

                //   ramt = Math.round((pamt) / dur);
                //==================================
                String sramtt = rs.getString("ramtt");
                Double tamtt = Double.parseDouble(sramtt);
                ramt = Math.round(tamtt);
                //=======================================
                String jdur = rs.getString("dur");
                String jpamt = rs.getString("amt");
                // MessageBox.infoBox(jdur, jpamt);

                if (bal < ramt) {
                    ramt = bal;
                }
                //ramt=get_ramt(accno,typ);
                if (intrtyp.equals("F")) {
                    intramt = Math.round(((pamt) * (intr / 100)) / dur);
                }
                if (intrtyp.equals("R")) {
                    intramt = Math.round(bal * (intr / 100));
                }
                qamt = ramt + intramt;

                //sql2 = " insert into repayments( membid,accno,loanid,amt,ramt,typ,nam,yr,mon,bal,intr,intramt,cdate,rdate,stat,ctime,comm,bnch,bacc,wamt,samt) values( "
                sql2 = " insert into repayments( membid,accno,loanid,amt,ramt,typ,nam,yr,mon,bal,intr,intramt,cdate,rdate,stat,ctime,comm) values( "
                        + "'" + membid + "'"
                        + "," + accno + ""
                        + ",'" + loanid + "'"
                        + "," + qamt + ""
                        + "," + ramt + ""
                        + ",'" + loantyp + "'"
                        + ",'" + nam + "'"
                        + ",'" + xyr + "'"
                        + ",'" + xmon + "'"
                        + "," + bal + ""
                        + "," + intr + ""
                        + "," + intramt + ""
                        + ",CURDATE()" //cdate
                        + ",CURDATE()" //rdate
                        + ",'U'"
                        + ",CURTIME()" //ctime
                        + ",'" + "Auto Recovered Loan for " + xyr + "-" + xmon + "')";
                System.out.print(sql2);
                //MessageBox.infoBox(sql2, "membid");
                execute(sql2);
            }
        }
    }
public int getauto(String id)
{
     int f=0;
        try {
           
            
            String sql = "SELECT * from saccodb where membid='"+id+"'";
            System.out.print(sql);
            // connx = DBconnect.ConnecrDb();
            pst6 = connx.prepareStatement(sql);
            rs6 = pst6.executeQuery();
            rs6.first();
            //  while (rs.next()) {
            f = Integer.valueOf(rs6.getInt("auto"));
            //  }
            
            
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(Recoveries_B_Add.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    return f;
}
    public void execute(String sql4)
    {
        System.out.print("\n"+sql4);
        try {             
              pst3=connx.prepareStatement(sql4);
              pst3.executeUpdate(sql4);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Users_add.class.getName()).log(Level.SEVERE, null, ex);
              MessageBox.infoBox(ex.toString(), sql4);
              return;
         //     msbbox.show(Alert.AlertType.ERROR, ex.toString(),"SQL Error" ,"ffff");
          }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          Recoveries_B_Add.this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Users_add.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Users_add dialog = new Users_add(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public void getdata()
{
    
    xyr=yr.getSelectedItem().toString();
    xmon = String.format("%02d", mon.getSelectedIndex() + 1);
   // xtyp=typ.getSelectedItem().toString();

   
}

 public int ifexists() throws SQLException 
 {
     int x = 0;
     String sql = "SELECT yr,mon,COUNT(*) as count FROM repbatches  where yr='" + xyr + "' and mon='" + xmon + "'  group by yr,mon";
     System.out.print(sql);
     Connection connx = DBconnect.ConnecrDb();
     pst = connx.prepareStatement(sql);

     rs = pst.executeQuery();
     //rs.first();
     while (rs.next()) {
        // user = rs.getString("userid");
       //  pwd = rs.getString("pass");
      //   typ = rs.getString("typ");
         x = Integer.valueOf(rs.getString("count"));
     }
      x=0;
     return x;
 }
 public int ifexists2() throws SQLException 
 {
     int x = 0;
     String sql = "SELECT yr,mon,COUNT(*) as count FROM bnkbatches  where yr='" + xyr + "' and mon='" + xmon + "'  group by yr,mon";
     System.out.print(sql);
     Connection connx = DBconnect.ConnecrDb();
     pst = connx.prepareStatement(sql);
     rs = pst.executeQuery();
     //rs.first();
     while (rs.next()) {
         x = Integer.valueOf(rs.getString("count"));
     }
     return x;
 }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JComboBox<String> mon;
    private javax.swing.JLabel sss;
    private javax.swing.JComboBox<String> yr;
    // End of variables declaration//GEN-END:variables
}
class ProgressBarUpdator implements java.lang.Runnable {

    /**
     * Progress bar that shows the current status
     */
    private javax.swing.JProgressBar jpb = null;
    /**
     * Progress bar value
     */
    private java.lang.Integer value = null;

    /**
     * Constructor
     * @param jpb The progress bar this has to update
     */
    public ProgressBarUpdator(javax.swing.JProgressBar jpb) {
        this.jpb = jpb;
        jpb.setMaximum(100);
    }

    /**
     * Sets the value to the progress bar
     * @param value Value to set
     */
    public void setValue(java.lang.Integer value) {
        this.value = value;
    }

    /**
     * Action of the thread will be executed here. The value of the progress bar will be set here.
     */
public void run() {
        do {
            if (value != null) {
                jpb.setValue((int) java.lang.Math.round(java.lang.Math.floor(value.intValue())));
            }
            try {
                java.lang.Thread.sleep(1L);
            } catch (java.lang.InterruptedException ex) {
                ex.printStackTrace();
            }
        } while (value == null || value.intValue() < jpb.getMaximum());
    }
}


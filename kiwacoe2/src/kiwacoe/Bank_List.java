/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiwacoe;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

//import static majiApp.Readings_BList.zyr;


/**
 *
 * @author user
 */
public class Bank_List extends javax.swing.JFrame {
DefaultTableModel testlist = new DefaultTableModel();
 ResultSet rs = null;
 ResultSet rs2 = null;
          public String mx,sql;
    ResultSet rs22 = null;
        PreparedStatement pst = null;
         PreparedStatement pst2 = null;
         PreparedStatement pst22 = null;
           PreparedStatement pst32 = null;
        public String xuserid,xnam,xpass,xtyp;
        static String zyr,zmon,ztyp,zstat;
        public Connection connz=null;
        HashMap hm=null;
      //  static String muserid,mnam,mtyp; 
    //   public static  ListSelectionModel cellSelectionModel ;
    /**
     * Creates new form UsersLIst
     * 
     * 
     */
         static JTable table;
    public Bank_List() {
    //  table=jTable1;
        initComponents();
              ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                String muserid = null;
                String mtyp = null;
                String mnam = null;
                int[] selectedRow = jTable1.getSelectedRows();
                int[] selectedColumns = jTable1.getSelectedColumns();
                int row = jTable1.getSelectedRow();
                int col = 1; // ID is the first Column
            //    zyr = jTable1.getValueAt(row, 0).toString();
            //    zmon = jTable1.getValueAt(row, 1).toString();
           //     ztyp = jTable1.getValueAt(row, 2).toString();
            //    zstat = jTable1.getValueAt(row, 4).toString();
             //   System.out.println("Selected: " + mtyp);
            }

        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        yr = new javax.swing.JComboBox<>();
        mon = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Export To Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        yr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));
        yr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yrActionPerformed(evt);
            }
        });

        mon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        mon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monActionPerformed(evt);
            }
        });

        jLabel1.setText("Year");

        jLabel2.setText("Month");

        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Print List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(43, 43, 43)
                .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 748, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // UsersLisr.e
        Bank_List.this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
     
        this.setCursor(cursor_typ.busy());
         int[] ii={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
       ExportExcel.preview(jTable1,ii);

        this.setCursor(cursor_typ.notbusy());
   
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void yrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yrActionPerformed
        // TODO add your handling code here:
        doread();
    }//GEN-LAST:event_yrActionPerformed

    private void monActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monActionPerformed
        // TODO add your handling code here:
          doread();
    }//GEN-LAST:event_monActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String syr = yr.getSelectedItem().toString();
        String smon = String.format("%02d", mon.getSelectedIndex() + 1);
        this.setCursor(cursor_typ.busy());
        hm = new HashMap();
        hm.put("yr", syr);
        hm.put("mon", smon);
        hm.put("title", "Bank Deductions For : " + GetMonth.format(smon) + "  , " + syr);
        String filename = "reportbanklist.jrxml";
        String title = "Bank Deductions For : " + GetMonth.format(smon) + "  , " + syr;
        RunReports.preview(filename, hm, title);
        // Insert a row at position p
        // int p = 1;
        // model.insertRow(p, new Object[] { "r3" });
        this.setCursor(cursor_typ.notbusy());
    }//GEN-LAST:event_jButton1ActionPerformed
  
     public void update_batch_stat(String ssql3)
   {
        try {
             
              
              pst32=connz.prepareStatement(ssql3);
              pst32.executeUpdate(ssql3);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
               MessageBox.infoBox(ex.toString(),"Update Batch Status Method" );
               return;
          }
   }
   public void update_rec_stat(String ssql3)
   {
        try {
             
              
              pst32=connz.prepareStatement(ssql3);
              pst32.executeUpdate(ssql3);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
               MessageBox.infoBox(ex.toString(),"Update Status Method" );
               return;
          }
   }
    public void insert_rec(String wsql)
    {
        try {
             
              
              pst32=connz.prepareStatement(wsql);
              pst32.executeUpdate(wsql);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
                MessageBox.infoBox(ex.toString(),"insert_rec Method" );
               return;
          }
    }
    
    public void doread()
{
   // String = mon.getSelectedItem().toString();
    String syr = yr.getSelectedItem().toString();
    String smon = String.format("%02d", mon.getSelectedIndex() + 1);
    //  String sval=val.getText().toString();

    sql = " select * from recovered where yr='" + syr + "' and mon='" + smon + "'";
    //    System.
    //   MessageBox.infoBox(sql, "dffd");

    System.out.println(sql);
    DefaultTableModel model = new DefaultTableModel();
    // jTable1 hh;
    jTable1.setModel(model);
    //   model.addColumn("Year");
//    model.addColumn("Month");
    // model.addColumn("Region");
    //   model.addColumn("Loan Type");
    model.addColumn("No.");
    model.addColumn("Branch");
    model.addColumn("Account Number");
    model.addColumn("Name");
    model.addColumn("Amount");
    // model.
    // Create the first row
    Connection conn = DBconnect.ConnecrDb();

    //  String sql = "SELECT * from users ";
    try {
        pst = conn.prepareStatement(sql);

        rs = pst.executeQuery();
        // rs.first();
        int p = 0;
        String bnch = "";
        String bacc = "";
        //  String btyp = "";
        //  String bdate = "";
        String nam = "";
        String amt = "";
        String scnt = "";
        //   String btot = "";
        int cnt = 0;
        while (rs.next()) {
            //  readdata();
            cnt = cnt + 1;
            scnt = Integer.toString(cnt);
            bnch = rs.getString("bnch");
            bacc = " " + rs.getString("bacc");
            //   breg = rs.getString("reg");
            //    btyp = rs.getString("typ");

            nam = rs.getString("nam");
            amt = rs.getString("tot");
            amt = Format_amt.format(amt);
            //   bstat = rs.getString("stat");
            model.insertRow(p, new Object[]{scnt, bnch, bacc, nam, amt});
        }

    } catch (SQLException ex) {
        Logger.getLogger(UsersLIst.class.getName()).log(Level.SEVERE, null, ex);
    }
     DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
       rightRenderer.setHorizontalAlignment(JLabel.CENTER);
   //     jTable1.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
         rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
         jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
     //     jTable1.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);

}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsersLIst().setVisible(true);
               
            }
        });
    }
   public void postbatch(String zyr,String zmon) throws SQLException
{           
        //String sx = membid.getText().toString();
        sql = "SELECT * from repayments where yr='" + zyr +"' and mon='"+zmon+"'";
        Connection connx = DBconnect.ConnecrDb();
        pst2 = connx.prepareStatement(sql);
        System.out.println(sql);
        rs2 = pst2.executeQuery();
        rs2.first();
      //  readdata();
        // double cnt=0;
        while (rs.next()) {           
             readbatch(zyr,zmon);
        }
        Close_batch.close(zyr,zmon,"repbatches");
       //   searchz();
        
    }

 public void readbatch(String hyr,String hmon) throws SQLException {
        //accno 	loanid 	typ 	yr 	mon 	bf 	intr 	cf 	nam 
      
      
       
     String amt = rs.getString("amt");
     String membid = rs.getString("membid");
     String nam = rs.getString("nam");
     String dat = rs.getString("cdate");
     String pseq = rs.getString("seq");
     String soc = "Repayments";
     String suffix = membid;
     String descr = "Repayments";
     String dr = amt;
     String cr = "0";
     String accno = "0000";
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon, dat, pseq);//post dr
     accno = "000";
     cr = amt;
     dr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,dat,pseq);//post cr
    }
    
    public void insert_rec(String accno,String soc,String descr,String suffix,String dr,String cr,String hyr,String hmon,String dat,String pseq)
    {
       
        sql = "insert into gl (accno,soc,descr,suffix,dr,cr,yr,mon,dat,pseq,pdate,ptime) values("
                + accno
                + ",'" + soc + "'"
                + ",'" + descr + "'"
                + ",'" + suffix + "'"
                + "," + dr + ""
                + "," + cr + ""
                + ",'" + hyr + "'"
                + ",'" + hmon + "'"
                + "," + dat + ""
                + "," + pseq + ""
                + ",,CURDATE(),CURTIME())";
        //     msbbox.show(Alert.AlertType.ERROR, sql, "Save Method", "Database Error");
        Connection conn = DBconnect.ConnecrDb();
        System.out.println(sql);
        try {
            pst22 = conn.prepareStatement(sql);
            pst22.executeUpdate(sql);
        } catch (SQLException ex) {
            Logger.getLogger(Loan_Repay_List.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox( ex.toString(), "Database Error");
          //  return;
        }

       // msbbox.show(Alert.AlertType.ERROR, "New record saved successfully", "New Record", "ffff");
      
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> mon;
    private javax.swing.JComboBox<String> yr;
    // End of variables declaration//GEN-END:variables
}

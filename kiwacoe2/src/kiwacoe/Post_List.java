/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kiwacoe;

import java.awt.Cursor;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Alert;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import static kiwacoe.LoansNew_List.zyr;





/**
 *
 * @author user
 */
public class Post_List extends javax.swing.JFrame {
DefaultTableModel testlist = new DefaultTableModel();
 ResultSet rs = null;
          public String mx,sql;
    ResultSet rs22 = null;
     ResultSet rs2 = null;
        PreparedStatement pst = null;
                PreparedStatement pst2 = null;
         PreparedStatement pst22 = null;
           PreparedStatement pst32 = null;
             Connection conn = DBconnect.ConnecrDb();
        public String xuserid,xnam,xpass,xtyp;
        static String zyr,zmon,ztyp,zstat;
        public Connection connz=null;
        HashMap hm=null;
      //  static String muserid,mnam,mtyp; 
    //   public static  ListSelectionModel cellSelectionModel ;
    /**
     * Creates new form UsersLIst
     * 
     * 
     */
         static JTable table;
    public Post_List() {
    //  table=jTable1;
        initComponents();
         jMenu2.setVisible(false);
        jTable1=SetTable.data(jTable1);
      //  jButton1.setVisible(false);
              ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                String muserid = null;
                String mtyp = null;
                String mnam = null;
                int[] selectedRow = jTable1.getSelectedRows();
                int[] selectedColumns = jTable1.getSelectedColumns();
                int row = jTable1.getSelectedRow();
                int col = 1; // ID is the first Column
              if (row>-1)
                {
                zyr = jTable1.getValueAt(row, 0).toString();
                zmon = jTable1.getValueAt(row, 1).toString();
                ztyp = jTable1.getValueAt(row, 2).toString();
                zstat = jTable1.getValueAt(row, 3).toString();
                System.out.println("Selected: " + mtyp);
                }
            }

        });
        set_currdate();
        doread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        yr = new javax.swing.JComboBox<>();
        mon = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        yr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026" }));
        yr.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                yrFocusGained(evt);
            }
        });
        yr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yrActionPerformed(evt);
            }
        });

        mon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "Feburuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        mon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monActionPerformed(evt);
            }
        });

        jLabel1.setText("Year");

        jLabel2.setText("Month");

        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("File");
        jMenu1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMenu1FocusGained(evt);
            }
        });

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Batches");

        jMenuItem2.setText("Add Batch");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(37, 37, 37)
                .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(yr, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(mon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton3)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // UsersLisr.e
        Post_List.this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void yrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yrActionPerformed
        // TODO add your handling code here:
        doread();
    }//GEN-LAST:event_yrActionPerformed

    private void monActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monActionPerformed
        // TODO add your handling code here:
          doread();
    }//GEN-LAST:event_monActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       Post_List.this.dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMenu1FocusGained
        // TODO add your handling code here:
         doread();
    }//GEN-LAST:event_jMenu1FocusGained

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
         Shares_B_Add dd=new Shares_B_Add(this,true);
          // dd.setModal(true);
              //  dialog.setSize(400, 400);
                dd.setLocationRelativeTo(null);
               // dd.setExtendedState(dd.MAXIMIZED_BOTH);
               dd.setResizable(false);
                dd.setDefaultCloseOperation(dd.DO_NOTHING_ON_CLOSE);
          dd.setTitle("Add Shares Batch");
          dd.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void yrFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_yrFocusGained
        // TODO add your handling code here:
        doread();
    }//GEN-LAST:event_yrFocusGained
/*
     public void update_batch() throws SQLException
  {
      
       Connection conn = DBconnect.ConnecrDb();

     String sql = "SELECT count(*) as cnt from shares where CONCAT(yr,mon,typ)='"+zyr+zmon+ztyp+"'";

      int bb=0;
        pst = conn.prepareStatement(sql);

        rs = pst.executeQuery();
        while(rs.next())
        {
           bb= rs.getInt("cnt");
        }
       String sql2=" update shbatches set recs="+Double.toString(bb); 
      pst = conn.prepareStatement(sql2);
      pst.executeUpdate(sql2);
  }
    */
    
    
    public void update_batch() throws SQLException
  {
       String syr = yr.getSelectedItem().toString();
      String smon = String.format("%02d", mon.getSelectedIndex() + 1);
      Connection conn = DBconnect.ConnecrDb();
      
      String msql="select * from shbatches where CONCAT(yr,mon)='"+syr+smon+"'";
      PreparedStatement pst99 = conn.prepareStatement(msql);
        System.out.print(msql);
      ResultSet rs1 = pst99.executeQuery();
     //  rs = pst.executeQuery();
      while (rs1.next()) {
        String  btyp = rs1.getString("typ");
     

      String sql = "SELECT count(*) as cnt from shares where CONCAT(yr,mon)='" + syr + smon + "'";

      int bb = 0;
      pst = conn.prepareStatement(sql);
      System.out.print(sql);
      rs = pst.executeQuery();
      while (rs.next()) {
          bb = rs.getInt("cnt");
      }
      String sql2 = " update shbatches set recs=" + Double.toString(bb)+" where CONCAT(yr,mon)='" + syr + smon + "'";
      pst = conn.prepareStatement(sql2);
      pst.executeUpdate(sql2);
      
       }
  }
    
    
    public void postbatch(String zyr,String zmon) throws SQLException
{
        //String sx = membid.getText().toString();
        sql = "SELECT * from shares where yr='" + zyr +"' and mon='"+zmon+"'";

        Connection connx = DBconnect.ConnecrDb();

        pst2 = connx.prepareStatement(sql);
        System.out.println(sql);

        rs2 = pst2.executeQuery();
      //  rs2.first();
      //  readdata();
        // double cnt=0;
        while (rs2.next()) {
           
             readbatch(zyr,zmon,rs2);

        }
        Close_batch.close(zyr,zmon,"shbatches");
       // searchz();
       MessageBox.infoBox("Posting Done!!", "Post Batch");
        
    }

 public void readbatch(String hyr,String hmon,ResultSet rrs) throws SQLException {
        //accno 	loanid 	typ 	yr 	mon 	bf 	intr 	cf 	nam   
     String amt = rrs.getString("amt");
     String membid = rrs.getString("membid");
     String nam = rrs.getString("nam");
     String dat = rrs.getString("cdate");
      String typ = rrs.getString("typ");
     String pseq = rrs.getString("seq");
     String soc = "Shares";
     String suffix = membid;
     String descr = "Shares";
     String cr = amt;
     String dr = "0";
     String accno = "0000";
     
     switch (typ)
     {
         case "Deposit":
             accno="2201";
             break;
             
         case "Share Capital" :  
              accno="5101";
             break;
     }
     
          
     insert_rec(accno, soc, descr, suffix, dr, cr, hyr, hmon, dat, pseq);//post dr
     accno = "1101";
     dr = amt;
     cr = "0";
     insert_rec(accno,soc,descr,suffix,dr,cr,hyr,hmon,dat,pseq);//post cr
    }
    
    public void insert_rec(String accno,String soc,String descr,String suffix,String dr,String cr,String hyr,String hmon,String dat,String pseq)
    {       
        sql = "insert into gl (accno,soc,descr,suffix,dr,cr,yr,mon,dat,pseq,docno,pdate,ptime) values("
                + accno
                + ",'" + soc + "'"
                + ",'" + descr + "'"
                + ",'" + suffix + "'"
                + "," + dr + ""
                + "," + cr + ""
                + ",'" + hyr + "'"
                + ",'" + hmon + "'"
                + ",'" + dat + "'"
                + "," + pseq + ""
                  + ",'"+pseq+"'"
                + ",CURDATE(),CURTIME())";
        //     msbbox.show(Alert.AlertType.ERROR, sql, "Save Method", "Database Error");
        System.out.println(sql);
      //  MessageBox.infoBox(sql, descr);
       //  conn = DBconnect.ConnecrDb();
        
        try {
            pst22 = conn.prepareStatement(sql);
            pst22.executeUpdate(sql);
            //    rs= pst.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(Shares_List.class.getName()).log(Level.SEVERE, null, ex);
            MessageBox.infoBox( ex.toString(), "Database Error");
            //  return;
        }
    }
    
     public void update_batch_stat(String ssql3)
   {
        try {
             
              
              pst32=connz.prepareStatement(ssql3);
              
              pst32.executeUpdate(ssql3);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
               MessageBox.infoBox(ex.toString(),"Update Batch Status Method" );
               return;
          }
   }
   public void update_rec_stat(String ssql3)
   {
        try {
             
              
              pst32=connz.prepareStatement(ssql3);
              pst32.executeUpdate(ssql3);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
               MessageBox.infoBox(ex.toString(),"Update Status Method" );
               return;
          }
   }
    public void insert_rec(String wsql)
    {
        try {
             
              
              pst32=connz.prepareStatement(wsql);
              pst32.executeUpdate(wsql);
             //    rs= pst.executeQuery();
          } catch (SQLException ex) {
              Logger.getLogger(Payments_BList.class.getName()).log(Level.SEVERE, null, ex);
                MessageBox.infoBox(ex.toString(),"insert_rec Method" );
               return;
          }
    }
    
    public void doread()
{
    
    String syr = yr.getSelectedItem().toString();
    String smon = String.format("%02d", mon.getSelectedIndex() + 1);
    //  String sval=val.getText().toString();

    sql = " select * from post_view2 where yr='" + syr + "' and mon='" + smon + "'";
    //    System.
    //   MessageBox.infoBox(sql, "dffd");
   
     System.out.println(sql);
    DefaultTableModel model = new DefaultTableModel();
    // jTable1 hh;
    jTable1.setModel(model);
    model.addColumn("Year");
    model.addColumn("Month");
   // model.addColumn("Region");
    model.addColumn("Post Type");
   
   
   
     model.addColumn("Status");
     model.addColumn("No of Recs");
    // model.
    // Create the first row
    Connection conn = DBconnect.ConnecrDb();

    //  String sql = "SELECT * from users ";

    try {
        pst = conn.prepareStatement(sql);

        rs = pst.executeQuery();
        // rs.first();
        int p = 0;
        String byr = "";
        String bmon = "";
        String btyp = "";
      //  String bdate = "";
        String bstat = "";
    //    String brecs = "";
   //     String btot = "";
         
        while (rs.next()) {
            //  readdata();
            byr = rs.getString("yr");
            bmon = rs.getString("mon");
         //   breg = rs.getString("reg");
          btyp = rs.getString("typ");
            
       //    btot = rs.getString("tot");
       //     brecs = rs.getString("recs");
            bstat = rs.getString("stat");
            model.insertRow(p, new Object[]{byr, bmon, btyp,  bstat,rs.getString("cnt")});
             jTable1.changeSelection(0, 0, false, false);
        }

    } catch (SQLException ex) {
        Logger.getLogger(UsersLIst.class.getName()).log(Level.SEVERE, null, ex);
    }
    
   

}
    
    
    public void set_currdate()
{
    
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
    LocalDateTime now = LocalDateTime.now();
    String mdat = dtf.format(now);
  //  System.out.println("aaa");
    String mdate[] = mdat.split("/");
    String y = mdate[0];
    String m = mdate[1];
    String d = mdate[2];
    int imon = Integer.parseInt(m);
   // System.out.println( y);
    int zmon = Integer.parseInt(m);
    
    mon.setSelectedIndex(zmon-1);
    yr.setSelectedItem(y);

   // System.out.println("dddd");
  //  System.out.println(dtf.format(now));
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersLIst.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsersLIst().setVisible(true);
               
              }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> mon;
    private javax.swing.JComboBox<String> yr;
    // End of variables declaration//GEN-END:variables
}
